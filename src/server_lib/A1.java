package server_lib;

import java.util.ArrayList;

import util.ProgramUniqueIdentifier;

/**
 * The server library is generated by Stub_Gen(), a compiler that reads the input 
 * specification file and creates a series of library interfaces and necessary handlers 
 * that a server needs when it is built. Due to the design and programming
 * difficulty, Stub_Gen() has not been implemented. We assume that server stubs 
 * have been generated by Stub_Gen() and we are now using them consequentially. 
 * It must be noted that the concept of using a Stub_Gen() to compile and generate 
 * server stubs have to be embraced and taken care of to make an efficient RPC. 
 * 
 *  In general, the library of server contains all programs that are supposed to be 
 *  supported by servers. In other words, servers that are created must follow and 
 *  implement the procedures defined in the library. Given such nature of design, we 
 *  used interfaces to define the scope of procedure calls that servers need to 
 *  support. Each interface defines the program name, version, procedure name, 
 *  return type, parameter names and their types.
 * 
 *  To expedite the method for the Port_Mapper and servers to easily identify the 
 *  procedures supported in each interface, a static method is implement to output 
 *  the unique identifiers for each procedure covered within this program.
 * 
 * @author Zichuan
 */

public interface A1 {

	public String procedure_0(A1 a1);

	public double[][] multiply(double[][] matrix1, double[][] matrix2, A1 a1);

	public double[] sort(double[] array, A1 a1);

	public double max(double[] array, A1 a1);

	public double min(double[] array, A1 a1);

	public static ArrayList<ProgramUniqueIdentifier> getPuidList() {
		ArrayList<ProgramUniqueIdentifier> puidList = new ArrayList<>();

		ArrayList<String> list_multiply = new ArrayList<>();
		list_multiply.add("double[][]");
		list_multiply.add("double[][]");
		ProgramUniqueIdentifier puid_multiply = new ProgramUniqueIdentifier("A", "1", "multiply",
				list_multiply);
		puidList.add(puid_multiply);

		ArrayList<String> list_sort = new ArrayList<>();
		list_sort.add("double[]");
		ProgramUniqueIdentifier puid_sort = new ProgramUniqueIdentifier("A", "1", "sort", list_sort);
		puidList.add(puid_sort);

		ArrayList<String> list_max = new ArrayList<>();
		list_max.add("double[]");
		ProgramUniqueIdentifier puid_max = new ProgramUniqueIdentifier("A", "1", "max", list_max);
		puidList.add(puid_max);

		ArrayList<String> list_min = new ArrayList<>();
		list_min.add("double[]");
		ProgramUniqueIdentifier puid_min = new ProgramUniqueIdentifier("A", "1", "min", list_min);
		puidList.add(puid_min);

		ArrayList<String> list_proc0 = new ArrayList<>();
		list_proc0.add("");
		ProgramUniqueIdentifier puid_proc0 = new ProgramUniqueIdentifier("A", "1", "procedure_0",
				list_proc0);
		puidList.add(puid_proc0);

		return puidList;
	}
}
